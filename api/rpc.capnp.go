// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type GetHistoryInfo capnp.Struct

// GetHistoryInfo_TypeID is the unique identifier for the type GetHistoryInfo.
const GetHistoryInfo_TypeID = 0xa4916a9af6221c0e

func NewGetHistoryInfo(s *capnp.Segment) (GetHistoryInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetHistoryInfo(st), err
}

func NewRootGetHistoryInfo(s *capnp.Segment) (GetHistoryInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetHistoryInfo(st), err
}

func ReadRootGetHistoryInfo(msg *capnp.Message) (GetHistoryInfo, error) {
	root, err := msg.Root()
	return GetHistoryInfo(root.Struct()), err
}

func (s GetHistoryInfo) String() string {
	str, _ := text.Marshal(0xa4916a9af6221c0e, capnp.Struct(s))
	return str
}

func (s GetHistoryInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GetHistoryInfo) DecodeFromPtr(p capnp.Ptr) GetHistoryInfo {
	return GetHistoryInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GetHistoryInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GetHistoryInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GetHistoryInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GetHistoryInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GetHistoryInfo) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s GetHistoryInfo) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GetHistoryInfo) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// GetHistoryInfo_List is a list of GetHistoryInfo.
type GetHistoryInfo_List = capnp.StructList[GetHistoryInfo]

// NewGetHistoryInfo creates a new list of GetHistoryInfo.
func NewGetHistoryInfo_List(s *capnp.Segment, sz int32) (GetHistoryInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GetHistoryInfo](l), err
}

// GetHistoryInfo_Future is a wrapper for a GetHistoryInfo promised by a client call.
type GetHistoryInfo_Future struct{ *capnp.Future }

func (f GetHistoryInfo_Future) Struct() (GetHistoryInfo, error) {
	p, err := f.Future.Ptr()
	return GetHistoryInfo(p.Struct()), err
}

type GetHistoryResponse capnp.Struct

// GetHistoryResponse_TypeID is the unique identifier for the type GetHistoryResponse.
const GetHistoryResponse_TypeID = 0xbdbfd815664b9423

func NewGetHistoryResponse(s *capnp.Segment) (GetHistoryResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return GetHistoryResponse(st), err
}

func NewRootGetHistoryResponse(s *capnp.Segment) (GetHistoryResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return GetHistoryResponse(st), err
}

func ReadRootGetHistoryResponse(msg *capnp.Message) (GetHistoryResponse, error) {
	root, err := msg.Root()
	return GetHistoryResponse(root.Struct()), err
}

func (s GetHistoryResponse) String() string {
	str, _ := text.Marshal(0xbdbfd815664b9423, capnp.Struct(s))
	return str
}

func (s GetHistoryResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GetHistoryResponse) DecodeFromPtr(p capnp.Ptr) GetHistoryResponse {
	return GetHistoryResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GetHistoryResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GetHistoryResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GetHistoryResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GetHistoryResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// GetHistoryResponse_List is a list of GetHistoryResponse.
type GetHistoryResponse_List = capnp.StructList[GetHistoryResponse]

// NewGetHistoryResponse creates a new list of GetHistoryResponse.
func NewGetHistoryResponse_List(s *capnp.Segment, sz int32) (GetHistoryResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[GetHistoryResponse](l), err
}

// GetHistoryResponse_Future is a wrapper for a GetHistoryResponse promised by a client call.
type GetHistoryResponse_Future struct{ *capnp.Future }

func (f GetHistoryResponse_Future) Struct() (GetHistoryResponse, error) {
	p, err := f.Future.Ptr()
	return GetHistoryResponse(p.Struct()), err
}

type FreezeWalletInfo capnp.Struct

// FreezeWalletInfo_TypeID is the unique identifier for the type FreezeWalletInfo.
const FreezeWalletInfo_TypeID = 0xabaf1be55aea0cca

func NewFreezeWalletInfo(s *capnp.Segment) (FreezeWalletInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FreezeWalletInfo(st), err
}

func NewRootFreezeWalletInfo(s *capnp.Segment) (FreezeWalletInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FreezeWalletInfo(st), err
}

func ReadRootFreezeWalletInfo(msg *capnp.Message) (FreezeWalletInfo, error) {
	root, err := msg.Root()
	return FreezeWalletInfo(root.Struct()), err
}

func (s FreezeWalletInfo) String() string {
	str, _ := text.Marshal(0xabaf1be55aea0cca, capnp.Struct(s))
	return str
}

func (s FreezeWalletInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FreezeWalletInfo) DecodeFromPtr(p capnp.Ptr) FreezeWalletInfo {
	return FreezeWalletInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FreezeWalletInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FreezeWalletInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FreezeWalletInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FreezeWalletInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FreezeWalletInfo) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s FreezeWalletInfo) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FreezeWalletInfo) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// FreezeWalletInfo_List is a list of FreezeWalletInfo.
type FreezeWalletInfo_List = capnp.StructList[FreezeWalletInfo]

// NewFreezeWalletInfo creates a new list of FreezeWalletInfo.
func NewFreezeWalletInfo_List(s *capnp.Segment, sz int32) (FreezeWalletInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[FreezeWalletInfo](l), err
}

// FreezeWalletInfo_Future is a wrapper for a FreezeWalletInfo promised by a client call.
type FreezeWalletInfo_Future struct{ *capnp.Future }

func (f FreezeWalletInfo_Future) Struct() (FreezeWalletInfo, error) {
	p, err := f.Future.Ptr()
	return FreezeWalletInfo(p.Struct()), err
}

type FreezeWalletResponse capnp.Struct

// FreezeWalletResponse_TypeID is the unique identifier for the type FreezeWalletResponse.
const FreezeWalletResponse_TypeID = 0x8ad5daaf6e1a1e6a

func NewFreezeWalletResponse(s *capnp.Segment) (FreezeWalletResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FreezeWalletResponse(st), err
}

func NewRootFreezeWalletResponse(s *capnp.Segment) (FreezeWalletResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FreezeWalletResponse(st), err
}

func ReadRootFreezeWalletResponse(msg *capnp.Message) (FreezeWalletResponse, error) {
	root, err := msg.Root()
	return FreezeWalletResponse(root.Struct()), err
}

func (s FreezeWalletResponse) String() string {
	str, _ := text.Marshal(0x8ad5daaf6e1a1e6a, capnp.Struct(s))
	return str
}

func (s FreezeWalletResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FreezeWalletResponse) DecodeFromPtr(p capnp.Ptr) FreezeWalletResponse {
	return FreezeWalletResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FreezeWalletResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FreezeWalletResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FreezeWalletResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FreezeWalletResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// FreezeWalletResponse_List is a list of FreezeWalletResponse.
type FreezeWalletResponse_List = capnp.StructList[FreezeWalletResponse]

// NewFreezeWalletResponse creates a new list of FreezeWalletResponse.
func NewFreezeWalletResponse_List(s *capnp.Segment, sz int32) (FreezeWalletResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[FreezeWalletResponse](l), err
}

// FreezeWalletResponse_Future is a wrapper for a FreezeWalletResponse promised by a client call.
type FreezeWalletResponse_Future struct{ *capnp.Future }

func (f FreezeWalletResponse_Future) Struct() (FreezeWalletResponse, error) {
	p, err := f.Future.Ptr()
	return FreezeWalletResponse(p.Struct()), err
}

type UnfreezeWalletInfo capnp.Struct

// UnfreezeWalletInfo_TypeID is the unique identifier for the type UnfreezeWalletInfo.
const UnfreezeWalletInfo_TypeID = 0xbe0b6361e7e7caf7

func NewUnfreezeWalletInfo(s *capnp.Segment) (UnfreezeWalletInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UnfreezeWalletInfo(st), err
}

func NewRootUnfreezeWalletInfo(s *capnp.Segment) (UnfreezeWalletInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UnfreezeWalletInfo(st), err
}

func ReadRootUnfreezeWalletInfo(msg *capnp.Message) (UnfreezeWalletInfo, error) {
	root, err := msg.Root()
	return UnfreezeWalletInfo(root.Struct()), err
}

func (s UnfreezeWalletInfo) String() string {
	str, _ := text.Marshal(0xbe0b6361e7e7caf7, capnp.Struct(s))
	return str
}

func (s UnfreezeWalletInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UnfreezeWalletInfo) DecodeFromPtr(p capnp.Ptr) UnfreezeWalletInfo {
	return UnfreezeWalletInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UnfreezeWalletInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UnfreezeWalletInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UnfreezeWalletInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UnfreezeWalletInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UnfreezeWalletInfo) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s UnfreezeWalletInfo) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UnfreezeWalletInfo) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// UnfreezeWalletInfo_List is a list of UnfreezeWalletInfo.
type UnfreezeWalletInfo_List = capnp.StructList[UnfreezeWalletInfo]

// NewUnfreezeWalletInfo creates a new list of UnfreezeWalletInfo.
func NewUnfreezeWalletInfo_List(s *capnp.Segment, sz int32) (UnfreezeWalletInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UnfreezeWalletInfo](l), err
}

// UnfreezeWalletInfo_Future is a wrapper for a UnfreezeWalletInfo promised by a client call.
type UnfreezeWalletInfo_Future struct{ *capnp.Future }

func (f UnfreezeWalletInfo_Future) Struct() (UnfreezeWalletInfo, error) {
	p, err := f.Future.Ptr()
	return UnfreezeWalletInfo(p.Struct()), err
}

type UnfreezeWalletResponse capnp.Struct

// UnfreezeWalletResponse_TypeID is the unique identifier for the type UnfreezeWalletResponse.
const UnfreezeWalletResponse_TypeID = 0x9bd80cf52ae464d4

func NewUnfreezeWalletResponse(s *capnp.Segment) (UnfreezeWalletResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UnfreezeWalletResponse(st), err
}

func NewRootUnfreezeWalletResponse(s *capnp.Segment) (UnfreezeWalletResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UnfreezeWalletResponse(st), err
}

func ReadRootUnfreezeWalletResponse(msg *capnp.Message) (UnfreezeWalletResponse, error) {
	root, err := msg.Root()
	return UnfreezeWalletResponse(root.Struct()), err
}

func (s UnfreezeWalletResponse) String() string {
	str, _ := text.Marshal(0x9bd80cf52ae464d4, capnp.Struct(s))
	return str
}

func (s UnfreezeWalletResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UnfreezeWalletResponse) DecodeFromPtr(p capnp.Ptr) UnfreezeWalletResponse {
	return UnfreezeWalletResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UnfreezeWalletResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UnfreezeWalletResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UnfreezeWalletResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UnfreezeWalletResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UnfreezeWalletResponse_List is a list of UnfreezeWalletResponse.
type UnfreezeWalletResponse_List = capnp.StructList[UnfreezeWalletResponse]

// NewUnfreezeWalletResponse creates a new list of UnfreezeWalletResponse.
func NewUnfreezeWalletResponse_List(s *capnp.Segment, sz int32) (UnfreezeWalletResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UnfreezeWalletResponse](l), err
}

// UnfreezeWalletResponse_Future is a wrapper for a UnfreezeWalletResponse promised by a client call.
type UnfreezeWalletResponse_Future struct{ *capnp.Future }

func (f UnfreezeWalletResponse_Future) Struct() (UnfreezeWalletResponse, error) {
	p, err := f.Future.Ptr()
	return UnfreezeWalletResponse(p.Struct()), err
}

type AddInfo capnp.Struct

// AddInfo_TypeID is the unique identifier for the type AddInfo.
const AddInfo_TypeID = 0xde94a421b17b76c4

func NewAddInfo(s *capnp.Segment) (AddInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AddInfo(st), err
}

func NewRootAddInfo(s *capnp.Segment) (AddInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AddInfo(st), err
}

func ReadRootAddInfo(msg *capnp.Message) (AddInfo, error) {
	root, err := msg.Root()
	return AddInfo(root.Struct()), err
}

func (s AddInfo) String() string {
	str, _ := text.Marshal(0xde94a421b17b76c4, capnp.Struct(s))
	return str
}

func (s AddInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AddInfo) DecodeFromPtr(p capnp.Ptr) AddInfo {
	return AddInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AddInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AddInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AddInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AddInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AddInfo) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s AddInfo) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AddInfo) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// AddInfo_List is a list of AddInfo.
type AddInfo_List = capnp.StructList[AddInfo]

// NewAddInfo creates a new list of AddInfo.
func NewAddInfo_List(s *capnp.Segment, sz int32) (AddInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AddInfo](l), err
}

// AddInfo_Future is a wrapper for a AddInfo promised by a client call.
type AddInfo_Future struct{ *capnp.Future }

func (f AddInfo_Future) Struct() (AddInfo, error) {
	p, err := f.Future.Ptr()
	return AddInfo(p.Struct()), err
}

type AddResponse capnp.Struct

// AddResponse_TypeID is the unique identifier for the type AddResponse.
const AddResponse_TypeID = 0xae5f2f49f02fcb5c

func NewAddResponse(s *capnp.Segment) (AddResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AddResponse(st), err
}

func NewRootAddResponse(s *capnp.Segment) (AddResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AddResponse(st), err
}

func ReadRootAddResponse(msg *capnp.Message) (AddResponse, error) {
	root, err := msg.Root()
	return AddResponse(root.Struct()), err
}

func (s AddResponse) String() string {
	str, _ := text.Marshal(0xae5f2f49f02fcb5c, capnp.Struct(s))
	return str
}

func (s AddResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AddResponse) DecodeFromPtr(p capnp.Ptr) AddResponse {
	return AddResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AddResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AddResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AddResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AddResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AddResponse_List is a list of AddResponse.
type AddResponse_List = capnp.StructList[AddResponse]

// NewAddResponse creates a new list of AddResponse.
func NewAddResponse_List(s *capnp.Segment, sz int32) (AddResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AddResponse](l), err
}

// AddResponse_Future is a wrapper for a AddResponse promised by a client call.
type AddResponse_Future struct{ *capnp.Future }

func (f AddResponse_Future) Struct() (AddResponse, error) {
	p, err := f.Future.Ptr()
	return AddResponse(p.Struct()), err
}

type ReduceInfo capnp.Struct

// ReduceInfo_TypeID is the unique identifier for the type ReduceInfo.
const ReduceInfo_TypeID = 0xc2175ac3c0c347f5

func NewReduceInfo(s *capnp.Segment) (ReduceInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ReduceInfo(st), err
}

func NewRootReduceInfo(s *capnp.Segment) (ReduceInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ReduceInfo(st), err
}

func ReadRootReduceInfo(msg *capnp.Message) (ReduceInfo, error) {
	root, err := msg.Root()
	return ReduceInfo(root.Struct()), err
}

func (s ReduceInfo) String() string {
	str, _ := text.Marshal(0xc2175ac3c0c347f5, capnp.Struct(s))
	return str
}

func (s ReduceInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ReduceInfo) DecodeFromPtr(p capnp.Ptr) ReduceInfo {
	return ReduceInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ReduceInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ReduceInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ReduceInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ReduceInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ReduceInfo) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ReduceInfo) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ReduceInfo) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// ReduceInfo_List is a list of ReduceInfo.
type ReduceInfo_List = capnp.StructList[ReduceInfo]

// NewReduceInfo creates a new list of ReduceInfo.
func NewReduceInfo_List(s *capnp.Segment, sz int32) (ReduceInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ReduceInfo](l), err
}

// ReduceInfo_Future is a wrapper for a ReduceInfo promised by a client call.
type ReduceInfo_Future struct{ *capnp.Future }

func (f ReduceInfo_Future) Struct() (ReduceInfo, error) {
	p, err := f.Future.Ptr()
	return ReduceInfo(p.Struct()), err
}

type ReduceResponse capnp.Struct

// ReduceResponse_TypeID is the unique identifier for the type ReduceResponse.
const ReduceResponse_TypeID = 0x9b3ce84c8cd1fdb8

func NewReduceResponse(s *capnp.Segment) (ReduceResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ReduceResponse(st), err
}

func NewRootReduceResponse(s *capnp.Segment) (ReduceResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ReduceResponse(st), err
}

func ReadRootReduceResponse(msg *capnp.Message) (ReduceResponse, error) {
	root, err := msg.Root()
	return ReduceResponse(root.Struct()), err
}

func (s ReduceResponse) String() string {
	str, _ := text.Marshal(0x9b3ce84c8cd1fdb8, capnp.Struct(s))
	return str
}

func (s ReduceResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ReduceResponse) DecodeFromPtr(p capnp.Ptr) ReduceResponse {
	return ReduceResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ReduceResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ReduceResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ReduceResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ReduceResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ReduceResponse_List is a list of ReduceResponse.
type ReduceResponse_List = capnp.StructList[ReduceResponse]

// NewReduceResponse creates a new list of ReduceResponse.
func NewReduceResponse_List(s *capnp.Segment, sz int32) (ReduceResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ReduceResponse](l), err
}

// ReduceResponse_Future is a wrapper for a ReduceResponse promised by a client call.
type ReduceResponse_Future struct{ *capnp.Future }

func (f ReduceResponse_Future) Struct() (ReduceResponse, error) {
	p, err := f.Future.Ptr()
	return ReduceResponse(p.Struct()), err
}

type TransferInfo capnp.Struct

// TransferInfo_TypeID is the unique identifier for the type TransferInfo.
const TransferInfo_TypeID = 0xd71f57cebdb1db21

func NewTransferInfo(s *capnp.Segment) (TransferInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TransferInfo(st), err
}

func NewRootTransferInfo(s *capnp.Segment) (TransferInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TransferInfo(st), err
}

func ReadRootTransferInfo(msg *capnp.Message) (TransferInfo, error) {
	root, err := msg.Root()
	return TransferInfo(root.Struct()), err
}

func (s TransferInfo) String() string {
	str, _ := text.Marshal(0xd71f57cebdb1db21, capnp.Struct(s))
	return str
}

func (s TransferInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TransferInfo) DecodeFromPtr(p capnp.Ptr) TransferInfo {
	return TransferInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TransferInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TransferInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TransferInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TransferInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TransferInfo) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s TransferInfo) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TransferInfo) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// TransferInfo_List is a list of TransferInfo.
type TransferInfo_List = capnp.StructList[TransferInfo]

// NewTransferInfo creates a new list of TransferInfo.
func NewTransferInfo_List(s *capnp.Segment, sz int32) (TransferInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TransferInfo](l), err
}

// TransferInfo_Future is a wrapper for a TransferInfo promised by a client call.
type TransferInfo_Future struct{ *capnp.Future }

func (f TransferInfo_Future) Struct() (TransferInfo, error) {
	p, err := f.Future.Ptr()
	return TransferInfo(p.Struct()), err
}

type TransferResponse capnp.Struct

// TransferResponse_TypeID is the unique identifier for the type TransferResponse.
const TransferResponse_TypeID = 0x8e47fb2be9794a6d

func NewTransferResponse(s *capnp.Segment) (TransferResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TransferResponse(st), err
}

func NewRootTransferResponse(s *capnp.Segment) (TransferResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TransferResponse(st), err
}

func ReadRootTransferResponse(msg *capnp.Message) (TransferResponse, error) {
	root, err := msg.Root()
	return TransferResponse(root.Struct()), err
}

func (s TransferResponse) String() string {
	str, _ := text.Marshal(0x8e47fb2be9794a6d, capnp.Struct(s))
	return str
}

func (s TransferResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TransferResponse) DecodeFromPtr(p capnp.Ptr) TransferResponse {
	return TransferResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TransferResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TransferResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TransferResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TransferResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TransferResponse_List is a list of TransferResponse.
type TransferResponse_List = capnp.StructList[TransferResponse]

// NewTransferResponse creates a new list of TransferResponse.
func NewTransferResponse_List(s *capnp.Segment, sz int32) (TransferResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TransferResponse](l), err
}

// TransferResponse_Future is a wrapper for a TransferResponse promised by a client call.
type TransferResponse_Future struct{ *capnp.Future }

func (f TransferResponse_Future) Struct() (TransferResponse, error) {
	p, err := f.Future.Ptr()
	return TransferResponse(p.Struct()), err
}

type ReserveInfo capnp.Struct

// ReserveInfo_TypeID is the unique identifier for the type ReserveInfo.
const ReserveInfo_TypeID = 0xa188a03cb6117d99

func NewReserveInfo(s *capnp.Segment) (ReserveInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ReserveInfo(st), err
}

func NewRootReserveInfo(s *capnp.Segment) (ReserveInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ReserveInfo(st), err
}

func ReadRootReserveInfo(msg *capnp.Message) (ReserveInfo, error) {
	root, err := msg.Root()
	return ReserveInfo(root.Struct()), err
}

func (s ReserveInfo) String() string {
	str, _ := text.Marshal(0xa188a03cb6117d99, capnp.Struct(s))
	return str
}

func (s ReserveInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ReserveInfo) DecodeFromPtr(p capnp.Ptr) ReserveInfo {
	return ReserveInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ReserveInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ReserveInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ReserveInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ReserveInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ReserveInfo) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ReserveInfo) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ReserveInfo) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// ReserveInfo_List is a list of ReserveInfo.
type ReserveInfo_List = capnp.StructList[ReserveInfo]

// NewReserveInfo creates a new list of ReserveInfo.
func NewReserveInfo_List(s *capnp.Segment, sz int32) (ReserveInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ReserveInfo](l), err
}

// ReserveInfo_Future is a wrapper for a ReserveInfo promised by a client call.
type ReserveInfo_Future struct{ *capnp.Future }

func (f ReserveInfo_Future) Struct() (ReserveInfo, error) {
	p, err := f.Future.Ptr()
	return ReserveInfo(p.Struct()), err
}

type ReserveResponse capnp.Struct

// ReserveResponse_TypeID is the unique identifier for the type ReserveResponse.
const ReserveResponse_TypeID = 0xc33f987a77f0c0a4

func NewReserveResponse(s *capnp.Segment) (ReserveResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ReserveResponse(st), err
}

func NewRootReserveResponse(s *capnp.Segment) (ReserveResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ReserveResponse(st), err
}

func ReadRootReserveResponse(msg *capnp.Message) (ReserveResponse, error) {
	root, err := msg.Root()
	return ReserveResponse(root.Struct()), err
}

func (s ReserveResponse) String() string {
	str, _ := text.Marshal(0xc33f987a77f0c0a4, capnp.Struct(s))
	return str
}

func (s ReserveResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ReserveResponse) DecodeFromPtr(p capnp.Ptr) ReserveResponse {
	return ReserveResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ReserveResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ReserveResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ReserveResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ReserveResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ReserveResponse_List is a list of ReserveResponse.
type ReserveResponse_List = capnp.StructList[ReserveResponse]

// NewReserveResponse creates a new list of ReserveResponse.
func NewReserveResponse_List(s *capnp.Segment, sz int32) (ReserveResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ReserveResponse](l), err
}

// ReserveResponse_Future is a wrapper for a ReserveResponse promised by a client call.
type ReserveResponse_Future struct{ *capnp.Future }

func (f ReserveResponse_Future) Struct() (ReserveResponse, error) {
	p, err := f.Future.Ptr()
	return ReserveResponse(p.Struct()), err
}

type SilverBroccoli capnp.Client

// SilverBroccoli_TypeID is the unique identifier for the type SilverBroccoli.
const SilverBroccoli_TypeID = 0xc4e1f924a19a3c64

func (c SilverBroccoli) GetBalance(ctx context.Context, params func(SilverBroccoli_getBalance_Params) error) (SilverBroccoli_getBalance_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      0,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "getBalance",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SilverBroccoli_getBalance_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SilverBroccoli_getBalance_Results_Future{Future: ans.Future()}, release

}

func (c SilverBroccoli) GetHistory(ctx context.Context, params func(SilverBroccoli_getHistory_Params) error) (SilverBroccoli_getHistory_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      1,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "getHistory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SilverBroccoli_getHistory_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SilverBroccoli_getHistory_Results_Future{Future: ans.Future()}, release

}

func (c SilverBroccoli) CreateWallet(ctx context.Context, params func(SilverBroccoli_createWallet_Params) error) (SilverBroccoli_createWallet_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      2,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "createWallet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SilverBroccoli_createWallet_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SilverBroccoli_createWallet_Results_Future{Future: ans.Future()}, release

}

func (c SilverBroccoli) FreezeWallet(ctx context.Context, params func(SilverBroccoli_freezeWallet_Params) error) (SilverBroccoli_freezeWallet_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      3,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "freezeWallet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SilverBroccoli_freezeWallet_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SilverBroccoli_freezeWallet_Results_Future{Future: ans.Future()}, release

}

func (c SilverBroccoli) UnfreezeWallet(ctx context.Context, params func(SilverBroccoli_unfreezeWallet_Params) error) (SilverBroccoli_unfreezeWallet_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      4,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "unfreezeWallet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SilverBroccoli_unfreezeWallet_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SilverBroccoli_unfreezeWallet_Results_Future{Future: ans.Future()}, release

}

func (c SilverBroccoli) Add(ctx context.Context, params func(SilverBroccoli_add_Params) error) (SilverBroccoli_add_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      5,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "add",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SilverBroccoli_add_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SilverBroccoli_add_Results_Future{Future: ans.Future()}, release

}

func (c SilverBroccoli) Reduce(ctx context.Context, params func(SilverBroccoli_reduce_Params) error) (SilverBroccoli_reduce_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      6,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "reduce",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SilverBroccoli_reduce_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SilverBroccoli_reduce_Results_Future{Future: ans.Future()}, release

}

func (c SilverBroccoli) Transfer(ctx context.Context, params func(SilverBroccoli_transfer_Params) error) (SilverBroccoli_transfer_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      7,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "transfer",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 24, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SilverBroccoli_transfer_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SilverBroccoli_transfer_Results_Future{Future: ans.Future()}, release

}

func (c SilverBroccoli) Reserve(ctx context.Context, params func(SilverBroccoli_reserve_Params) error) (SilverBroccoli_reserve_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      8,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "reserve",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SilverBroccoli_reserve_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SilverBroccoli_reserve_Results_Future{Future: ans.Future()}, release

}

func (c SilverBroccoli) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c SilverBroccoli) String() string {
	return "SilverBroccoli(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c SilverBroccoli) AddRef() SilverBroccoli {
	return SilverBroccoli(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c SilverBroccoli) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c SilverBroccoli) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c SilverBroccoli) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (SilverBroccoli) DecodeFromPtr(p capnp.Ptr) SilverBroccoli {
	return SilverBroccoli(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c SilverBroccoli) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c SilverBroccoli) IsSame(other SilverBroccoli) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c SilverBroccoli) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c SilverBroccoli) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A SilverBroccoli_Server is a SilverBroccoli with a local implementation.
type SilverBroccoli_Server interface {
	GetBalance(context.Context, SilverBroccoli_getBalance) error

	GetHistory(context.Context, SilverBroccoli_getHistory) error

	CreateWallet(context.Context, SilverBroccoli_createWallet) error

	FreezeWallet(context.Context, SilverBroccoli_freezeWallet) error

	UnfreezeWallet(context.Context, SilverBroccoli_unfreezeWallet) error

	Add(context.Context, SilverBroccoli_add) error

	Reduce(context.Context, SilverBroccoli_reduce) error

	Transfer(context.Context, SilverBroccoli_transfer) error

	Reserve(context.Context, SilverBroccoli_reserve) error
}

// SilverBroccoli_NewServer creates a new Server from an implementation of SilverBroccoli_Server.
func SilverBroccoli_NewServer(s SilverBroccoli_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(SilverBroccoli_Methods(nil, s), s, c)
}

// SilverBroccoli_ServerToClient creates a new Client from an implementation of SilverBroccoli_Server.
// The caller is responsible for calling Release on the returned Client.
func SilverBroccoli_ServerToClient(s SilverBroccoli_Server) SilverBroccoli {
	return SilverBroccoli(capnp.NewClient(SilverBroccoli_NewServer(s)))
}

// SilverBroccoli_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func SilverBroccoli_Methods(methods []server.Method, s SilverBroccoli_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 9)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      0,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "getBalance",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetBalance(ctx, SilverBroccoli_getBalance{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      1,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "getHistory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetHistory(ctx, SilverBroccoli_getHistory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      2,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "createWallet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CreateWallet(ctx, SilverBroccoli_createWallet{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      3,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "freezeWallet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FreezeWallet(ctx, SilverBroccoli_freezeWallet{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      4,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "unfreezeWallet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.UnfreezeWallet(ctx, SilverBroccoli_unfreezeWallet{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      5,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "add",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Add(ctx, SilverBroccoli_add{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      6,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "reduce",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Reduce(ctx, SilverBroccoli_reduce{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      7,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "transfer",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Transfer(ctx, SilverBroccoli_transfer{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc4e1f924a19a3c64,
			MethodID:      8,
			InterfaceName: "rpc.capnp:SilverBroccoli",
			MethodName:    "reserve",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Reserve(ctx, SilverBroccoli_reserve{call})
		},
	})

	return methods
}

// SilverBroccoli_getBalance holds the state for a server call to SilverBroccoli.getBalance.
// See server.Call for documentation.
type SilverBroccoli_getBalance struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SilverBroccoli_getBalance) Args() SilverBroccoli_getBalance_Params {
	return SilverBroccoli_getBalance_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SilverBroccoli_getBalance) AllocResults() (SilverBroccoli_getBalance_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SilverBroccoli_getBalance_Results(r), err
}

// SilverBroccoli_getHistory holds the state for a server call to SilverBroccoli.getHistory.
// See server.Call for documentation.
type SilverBroccoli_getHistory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SilverBroccoli_getHistory) Args() SilverBroccoli_getHistory_Params {
	return SilverBroccoli_getHistory_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SilverBroccoli_getHistory) AllocResults() (SilverBroccoli_getHistory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_getHistory_Results(r), err
}

// SilverBroccoli_createWallet holds the state for a server call to SilverBroccoli.createWallet.
// See server.Call for documentation.
type SilverBroccoli_createWallet struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SilverBroccoli_createWallet) Args() SilverBroccoli_createWallet_Params {
	return SilverBroccoli_createWallet_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SilverBroccoli_createWallet) AllocResults() (SilverBroccoli_createWallet_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SilverBroccoli_createWallet_Results(r), err
}

// SilverBroccoli_freezeWallet holds the state for a server call to SilverBroccoli.freezeWallet.
// See server.Call for documentation.
type SilverBroccoli_freezeWallet struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SilverBroccoli_freezeWallet) Args() SilverBroccoli_freezeWallet_Params {
	return SilverBroccoli_freezeWallet_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SilverBroccoli_freezeWallet) AllocResults() (SilverBroccoli_freezeWallet_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SilverBroccoli_freezeWallet_Results(r), err
}

// SilverBroccoli_unfreezeWallet holds the state for a server call to SilverBroccoli.unfreezeWallet.
// See server.Call for documentation.
type SilverBroccoli_unfreezeWallet struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SilverBroccoli_unfreezeWallet) Args() SilverBroccoli_unfreezeWallet_Params {
	return SilverBroccoli_unfreezeWallet_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SilverBroccoli_unfreezeWallet) AllocResults() (SilverBroccoli_unfreezeWallet_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SilverBroccoli_unfreezeWallet_Results(r), err
}

// SilverBroccoli_add holds the state for a server call to SilverBroccoli.add.
// See server.Call for documentation.
type SilverBroccoli_add struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SilverBroccoli_add) Args() SilverBroccoli_add_Params {
	return SilverBroccoli_add_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SilverBroccoli_add) AllocResults() (SilverBroccoli_add_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_add_Results(r), err
}

// SilverBroccoli_reduce holds the state for a server call to SilverBroccoli.reduce.
// See server.Call for documentation.
type SilverBroccoli_reduce struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SilverBroccoli_reduce) Args() SilverBroccoli_reduce_Params {
	return SilverBroccoli_reduce_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SilverBroccoli_reduce) AllocResults() (SilverBroccoli_reduce_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_reduce_Results(r), err
}

// SilverBroccoli_transfer holds the state for a server call to SilverBroccoli.transfer.
// See server.Call for documentation.
type SilverBroccoli_transfer struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SilverBroccoli_transfer) Args() SilverBroccoli_transfer_Params {
	return SilverBroccoli_transfer_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SilverBroccoli_transfer) AllocResults() (SilverBroccoli_transfer_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_transfer_Results(r), err
}

// SilverBroccoli_reserve holds the state for a server call to SilverBroccoli.reserve.
// See server.Call for documentation.
type SilverBroccoli_reserve struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SilverBroccoli_reserve) Args() SilverBroccoli_reserve_Params {
	return SilverBroccoli_reserve_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SilverBroccoli_reserve) AllocResults() (SilverBroccoli_reserve_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_reserve_Results(r), err
}

// SilverBroccoli_List is a list of SilverBroccoli.
type SilverBroccoli_List = capnp.CapList[SilverBroccoli]

// NewSilverBroccoli_List creates a new list of SilverBroccoli.
func NewSilverBroccoli_List(s *capnp.Segment, sz int32) (SilverBroccoli_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[SilverBroccoli](l), err
}

type SilverBroccoli_getBalance_Params capnp.Struct

// SilverBroccoli_getBalance_Params_TypeID is the unique identifier for the type SilverBroccoli_getBalance_Params.
const SilverBroccoli_getBalance_Params_TypeID = 0x88b8701ff0a54dbe

func NewSilverBroccoli_getBalance_Params(s *capnp.Segment) (SilverBroccoli_getBalance_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SilverBroccoli_getBalance_Params(st), err
}

func NewRootSilverBroccoli_getBalance_Params(s *capnp.Segment) (SilverBroccoli_getBalance_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SilverBroccoli_getBalance_Params(st), err
}

func ReadRootSilverBroccoli_getBalance_Params(msg *capnp.Message) (SilverBroccoli_getBalance_Params, error) {
	root, err := msg.Root()
	return SilverBroccoli_getBalance_Params(root.Struct()), err
}

func (s SilverBroccoli_getBalance_Params) String() string {
	str, _ := text.Marshal(0x88b8701ff0a54dbe, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_getBalance_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_getBalance_Params) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_getBalance_Params {
	return SilverBroccoli_getBalance_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_getBalance_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_getBalance_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_getBalance_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_getBalance_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SilverBroccoli_getBalance_Params) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SilverBroccoli_getBalance_Params) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SilverBroccoli_getBalance_Params) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s SilverBroccoli_getBalance_Params) WalletId() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s SilverBroccoli_getBalance_Params) SetWalletId(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// SilverBroccoli_getBalance_Params_List is a list of SilverBroccoli_getBalance_Params.
type SilverBroccoli_getBalance_Params_List = capnp.StructList[SilverBroccoli_getBalance_Params]

// NewSilverBroccoli_getBalance_Params creates a new list of SilverBroccoli_getBalance_Params.
func NewSilverBroccoli_getBalance_Params_List(s *capnp.Segment, sz int32) (SilverBroccoli_getBalance_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SilverBroccoli_getBalance_Params](l), err
}

// SilverBroccoli_getBalance_Params_Future is a wrapper for a SilverBroccoli_getBalance_Params promised by a client call.
type SilverBroccoli_getBalance_Params_Future struct{ *capnp.Future }

func (f SilverBroccoli_getBalance_Params_Future) Struct() (SilverBroccoli_getBalance_Params, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_getBalance_Params(p.Struct()), err
}

type SilverBroccoli_getBalance_Results capnp.Struct

// SilverBroccoli_getBalance_Results_TypeID is the unique identifier for the type SilverBroccoli_getBalance_Results.
const SilverBroccoli_getBalance_Results_TypeID = 0xc44021695d86fdb4

func NewSilverBroccoli_getBalance_Results(s *capnp.Segment) (SilverBroccoli_getBalance_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SilverBroccoli_getBalance_Results(st), err
}

func NewRootSilverBroccoli_getBalance_Results(s *capnp.Segment) (SilverBroccoli_getBalance_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SilverBroccoli_getBalance_Results(st), err
}

func ReadRootSilverBroccoli_getBalance_Results(msg *capnp.Message) (SilverBroccoli_getBalance_Results, error) {
	root, err := msg.Root()
	return SilverBroccoli_getBalance_Results(root.Struct()), err
}

func (s SilverBroccoli_getBalance_Results) String() string {
	str, _ := text.Marshal(0xc44021695d86fdb4, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_getBalance_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_getBalance_Results) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_getBalance_Results {
	return SilverBroccoli_getBalance_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_getBalance_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_getBalance_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_getBalance_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_getBalance_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SilverBroccoli_getBalance_Results) Balance() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s SilverBroccoli_getBalance_Results) SetBalance(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// SilverBroccoli_getBalance_Results_List is a list of SilverBroccoli_getBalance_Results.
type SilverBroccoli_getBalance_Results_List = capnp.StructList[SilverBroccoli_getBalance_Results]

// NewSilverBroccoli_getBalance_Results creates a new list of SilverBroccoli_getBalance_Results.
func NewSilverBroccoli_getBalance_Results_List(s *capnp.Segment, sz int32) (SilverBroccoli_getBalance_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SilverBroccoli_getBalance_Results](l), err
}

// SilverBroccoli_getBalance_Results_Future is a wrapper for a SilverBroccoli_getBalance_Results promised by a client call.
type SilverBroccoli_getBalance_Results_Future struct{ *capnp.Future }

func (f SilverBroccoli_getBalance_Results_Future) Struct() (SilverBroccoli_getBalance_Results, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_getBalance_Results(p.Struct()), err
}

type SilverBroccoli_getHistory_Params capnp.Struct

// SilverBroccoli_getHistory_Params_TypeID is the unique identifier for the type SilverBroccoli_getHistory_Params.
const SilverBroccoli_getHistory_Params_TypeID = 0xbbf1fdc95b664215

func NewSilverBroccoli_getHistory_Params(s *capnp.Segment) (SilverBroccoli_getHistory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_getHistory_Params(st), err
}

func NewRootSilverBroccoli_getHistory_Params(s *capnp.Segment) (SilverBroccoli_getHistory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_getHistory_Params(st), err
}

func ReadRootSilverBroccoli_getHistory_Params(msg *capnp.Message) (SilverBroccoli_getHistory_Params, error) {
	root, err := msg.Root()
	return SilverBroccoli_getHistory_Params(root.Struct()), err
}

func (s SilverBroccoli_getHistory_Params) String() string {
	str, _ := text.Marshal(0xbbf1fdc95b664215, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_getHistory_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_getHistory_Params) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_getHistory_Params {
	return SilverBroccoli_getHistory_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_getHistory_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_getHistory_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_getHistory_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_getHistory_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SilverBroccoli_getHistory_Params) Info() (GetHistoryInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return GetHistoryInfo(p.Struct()), err
}

func (s SilverBroccoli_getHistory_Params) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SilverBroccoli_getHistory_Params) SetInfo(v GetHistoryInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated GetHistoryInfo struct, preferring placement in s's segment.
func (s SilverBroccoli_getHistory_Params) NewInfo() (GetHistoryInfo, error) {
	ss, err := NewGetHistoryInfo(capnp.Struct(s).Segment())
	if err != nil {
		return GetHistoryInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SilverBroccoli_getHistory_Params_List is a list of SilverBroccoli_getHistory_Params.
type SilverBroccoli_getHistory_Params_List = capnp.StructList[SilverBroccoli_getHistory_Params]

// NewSilverBroccoli_getHistory_Params creates a new list of SilverBroccoli_getHistory_Params.
func NewSilverBroccoli_getHistory_Params_List(s *capnp.Segment, sz int32) (SilverBroccoli_getHistory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SilverBroccoli_getHistory_Params](l), err
}

// SilverBroccoli_getHistory_Params_Future is a wrapper for a SilverBroccoli_getHistory_Params promised by a client call.
type SilverBroccoli_getHistory_Params_Future struct{ *capnp.Future }

func (f SilverBroccoli_getHistory_Params_Future) Struct() (SilverBroccoli_getHistory_Params, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_getHistory_Params(p.Struct()), err
}
func (p SilverBroccoli_getHistory_Params_Future) Info() GetHistoryInfo_Future {
	return GetHistoryInfo_Future{Future: p.Future.Field(0, nil)}
}

type SilverBroccoli_getHistory_Results capnp.Struct

// SilverBroccoli_getHistory_Results_TypeID is the unique identifier for the type SilverBroccoli_getHistory_Results.
const SilverBroccoli_getHistory_Results_TypeID = 0xde0071e4803ccc44

func NewSilverBroccoli_getHistory_Results(s *capnp.Segment) (SilverBroccoli_getHistory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_getHistory_Results(st), err
}

func NewRootSilverBroccoli_getHistory_Results(s *capnp.Segment) (SilverBroccoli_getHistory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_getHistory_Results(st), err
}

func ReadRootSilverBroccoli_getHistory_Results(msg *capnp.Message) (SilverBroccoli_getHistory_Results, error) {
	root, err := msg.Root()
	return SilverBroccoli_getHistory_Results(root.Struct()), err
}

func (s SilverBroccoli_getHistory_Results) String() string {
	str, _ := text.Marshal(0xde0071e4803ccc44, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_getHistory_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_getHistory_Results) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_getHistory_Results {
	return SilverBroccoli_getHistory_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_getHistory_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_getHistory_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_getHistory_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_getHistory_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SilverBroccoli_getHistory_Results) Respones() (GetHistoryResponse, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return GetHistoryResponse(p.Struct()), err
}

func (s SilverBroccoli_getHistory_Results) HasRespones() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SilverBroccoli_getHistory_Results) SetRespones(v GetHistoryResponse) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRespones sets the respones field to a newly
// allocated GetHistoryResponse struct, preferring placement in s's segment.
func (s SilverBroccoli_getHistory_Results) NewRespones() (GetHistoryResponse, error) {
	ss, err := NewGetHistoryResponse(capnp.Struct(s).Segment())
	if err != nil {
		return GetHistoryResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SilverBroccoli_getHistory_Results_List is a list of SilverBroccoli_getHistory_Results.
type SilverBroccoli_getHistory_Results_List = capnp.StructList[SilverBroccoli_getHistory_Results]

// NewSilverBroccoli_getHistory_Results creates a new list of SilverBroccoli_getHistory_Results.
func NewSilverBroccoli_getHistory_Results_List(s *capnp.Segment, sz int32) (SilverBroccoli_getHistory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SilverBroccoli_getHistory_Results](l), err
}

// SilverBroccoli_getHistory_Results_Future is a wrapper for a SilverBroccoli_getHistory_Results promised by a client call.
type SilverBroccoli_getHistory_Results_Future struct{ *capnp.Future }

func (f SilverBroccoli_getHistory_Results_Future) Struct() (SilverBroccoli_getHistory_Results, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_getHistory_Results(p.Struct()), err
}
func (p SilverBroccoli_getHistory_Results_Future) Respones() GetHistoryResponse_Future {
	return GetHistoryResponse_Future{Future: p.Future.Field(0, nil)}
}

type SilverBroccoli_createWallet_Params capnp.Struct

// SilverBroccoli_createWallet_Params_TypeID is the unique identifier for the type SilverBroccoli_createWallet_Params.
const SilverBroccoli_createWallet_Params_TypeID = 0xe59ac8587f100b08

func NewSilverBroccoli_createWallet_Params(s *capnp.Segment) (SilverBroccoli_createWallet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SilverBroccoli_createWallet_Params(st), err
}

func NewRootSilverBroccoli_createWallet_Params(s *capnp.Segment) (SilverBroccoli_createWallet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SilverBroccoli_createWallet_Params(st), err
}

func ReadRootSilverBroccoli_createWallet_Params(msg *capnp.Message) (SilverBroccoli_createWallet_Params, error) {
	root, err := msg.Root()
	return SilverBroccoli_createWallet_Params(root.Struct()), err
}

func (s SilverBroccoli_createWallet_Params) String() string {
	str, _ := text.Marshal(0xe59ac8587f100b08, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_createWallet_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_createWallet_Params) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_createWallet_Params {
	return SilverBroccoli_createWallet_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_createWallet_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_createWallet_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_createWallet_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_createWallet_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SilverBroccoli_createWallet_Params) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SilverBroccoli_createWallet_Params) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SilverBroccoli_createWallet_Params) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s SilverBroccoli_createWallet_Params) TypeId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SilverBroccoli_createWallet_Params) SetTypeId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// SilverBroccoli_createWallet_Params_List is a list of SilverBroccoli_createWallet_Params.
type SilverBroccoli_createWallet_Params_List = capnp.StructList[SilverBroccoli_createWallet_Params]

// NewSilverBroccoli_createWallet_Params creates a new list of SilverBroccoli_createWallet_Params.
func NewSilverBroccoli_createWallet_Params_List(s *capnp.Segment, sz int32) (SilverBroccoli_createWallet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SilverBroccoli_createWallet_Params](l), err
}

// SilverBroccoli_createWallet_Params_Future is a wrapper for a SilverBroccoli_createWallet_Params promised by a client call.
type SilverBroccoli_createWallet_Params_Future struct{ *capnp.Future }

func (f SilverBroccoli_createWallet_Params_Future) Struct() (SilverBroccoli_createWallet_Params, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_createWallet_Params(p.Struct()), err
}

type SilverBroccoli_createWallet_Results capnp.Struct

// SilverBroccoli_createWallet_Results_TypeID is the unique identifier for the type SilverBroccoli_createWallet_Results.
const SilverBroccoli_createWallet_Results_TypeID = 0xf57a7f17995809f6

func NewSilverBroccoli_createWallet_Results(s *capnp.Segment) (SilverBroccoli_createWallet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SilverBroccoli_createWallet_Results(st), err
}

func NewRootSilverBroccoli_createWallet_Results(s *capnp.Segment) (SilverBroccoli_createWallet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SilverBroccoli_createWallet_Results(st), err
}

func ReadRootSilverBroccoli_createWallet_Results(msg *capnp.Message) (SilverBroccoli_createWallet_Results, error) {
	root, err := msg.Root()
	return SilverBroccoli_createWallet_Results(root.Struct()), err
}

func (s SilverBroccoli_createWallet_Results) String() string {
	str, _ := text.Marshal(0xf57a7f17995809f6, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_createWallet_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_createWallet_Results) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_createWallet_Results {
	return SilverBroccoli_createWallet_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_createWallet_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_createWallet_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_createWallet_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_createWallet_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SilverBroccoli_createWallet_Results) WalletId() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s SilverBroccoli_createWallet_Results) SetWalletId(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// SilverBroccoli_createWallet_Results_List is a list of SilverBroccoli_createWallet_Results.
type SilverBroccoli_createWallet_Results_List = capnp.StructList[SilverBroccoli_createWallet_Results]

// NewSilverBroccoli_createWallet_Results creates a new list of SilverBroccoli_createWallet_Results.
func NewSilverBroccoli_createWallet_Results_List(s *capnp.Segment, sz int32) (SilverBroccoli_createWallet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SilverBroccoli_createWallet_Results](l), err
}

// SilverBroccoli_createWallet_Results_Future is a wrapper for a SilverBroccoli_createWallet_Results promised by a client call.
type SilverBroccoli_createWallet_Results_Future struct{ *capnp.Future }

func (f SilverBroccoli_createWallet_Results_Future) Struct() (SilverBroccoli_createWallet_Results, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_createWallet_Results(p.Struct()), err
}

type SilverBroccoli_freezeWallet_Params capnp.Struct

// SilverBroccoli_freezeWallet_Params_TypeID is the unique identifier for the type SilverBroccoli_freezeWallet_Params.
const SilverBroccoli_freezeWallet_Params_TypeID = 0xce2b6dba204eedd1

func NewSilverBroccoli_freezeWallet_Params(s *capnp.Segment) (SilverBroccoli_freezeWallet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SilverBroccoli_freezeWallet_Params(st), err
}

func NewRootSilverBroccoli_freezeWallet_Params(s *capnp.Segment) (SilverBroccoli_freezeWallet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SilverBroccoli_freezeWallet_Params(st), err
}

func ReadRootSilverBroccoli_freezeWallet_Params(msg *capnp.Message) (SilverBroccoli_freezeWallet_Params, error) {
	root, err := msg.Root()
	return SilverBroccoli_freezeWallet_Params(root.Struct()), err
}

func (s SilverBroccoli_freezeWallet_Params) String() string {
	str, _ := text.Marshal(0xce2b6dba204eedd1, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_freezeWallet_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_freezeWallet_Params) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_freezeWallet_Params {
	return SilverBroccoli_freezeWallet_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_freezeWallet_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_freezeWallet_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_freezeWallet_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_freezeWallet_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SilverBroccoli_freezeWallet_Params) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SilverBroccoli_freezeWallet_Params) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SilverBroccoli_freezeWallet_Params) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s SilverBroccoli_freezeWallet_Params) WalletId() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s SilverBroccoli_freezeWallet_Params) SetWalletId(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// SilverBroccoli_freezeWallet_Params_List is a list of SilverBroccoli_freezeWallet_Params.
type SilverBroccoli_freezeWallet_Params_List = capnp.StructList[SilverBroccoli_freezeWallet_Params]

// NewSilverBroccoli_freezeWallet_Params creates a new list of SilverBroccoli_freezeWallet_Params.
func NewSilverBroccoli_freezeWallet_Params_List(s *capnp.Segment, sz int32) (SilverBroccoli_freezeWallet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SilverBroccoli_freezeWallet_Params](l), err
}

// SilverBroccoli_freezeWallet_Params_Future is a wrapper for a SilverBroccoli_freezeWallet_Params promised by a client call.
type SilverBroccoli_freezeWallet_Params_Future struct{ *capnp.Future }

func (f SilverBroccoli_freezeWallet_Params_Future) Struct() (SilverBroccoli_freezeWallet_Params, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_freezeWallet_Params(p.Struct()), err
}

type SilverBroccoli_freezeWallet_Results capnp.Struct

// SilverBroccoli_freezeWallet_Results_TypeID is the unique identifier for the type SilverBroccoli_freezeWallet_Results.
const SilverBroccoli_freezeWallet_Results_TypeID = 0xbfe9320027a4dee3

func NewSilverBroccoli_freezeWallet_Results(s *capnp.Segment) (SilverBroccoli_freezeWallet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SilverBroccoli_freezeWallet_Results(st), err
}

func NewRootSilverBroccoli_freezeWallet_Results(s *capnp.Segment) (SilverBroccoli_freezeWallet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SilverBroccoli_freezeWallet_Results(st), err
}

func ReadRootSilverBroccoli_freezeWallet_Results(msg *capnp.Message) (SilverBroccoli_freezeWallet_Results, error) {
	root, err := msg.Root()
	return SilverBroccoli_freezeWallet_Results(root.Struct()), err
}

func (s SilverBroccoli_freezeWallet_Results) String() string {
	str, _ := text.Marshal(0xbfe9320027a4dee3, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_freezeWallet_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_freezeWallet_Results) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_freezeWallet_Results {
	return SilverBroccoli_freezeWallet_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_freezeWallet_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_freezeWallet_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_freezeWallet_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_freezeWallet_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SilverBroccoli_freezeWallet_Results_List is a list of SilverBroccoli_freezeWallet_Results.
type SilverBroccoli_freezeWallet_Results_List = capnp.StructList[SilverBroccoli_freezeWallet_Results]

// NewSilverBroccoli_freezeWallet_Results creates a new list of SilverBroccoli_freezeWallet_Results.
func NewSilverBroccoli_freezeWallet_Results_List(s *capnp.Segment, sz int32) (SilverBroccoli_freezeWallet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SilverBroccoli_freezeWallet_Results](l), err
}

// SilverBroccoli_freezeWallet_Results_Future is a wrapper for a SilverBroccoli_freezeWallet_Results promised by a client call.
type SilverBroccoli_freezeWallet_Results_Future struct{ *capnp.Future }

func (f SilverBroccoli_freezeWallet_Results_Future) Struct() (SilverBroccoli_freezeWallet_Results, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_freezeWallet_Results(p.Struct()), err
}

type SilverBroccoli_unfreezeWallet_Params capnp.Struct

// SilverBroccoli_unfreezeWallet_Params_TypeID is the unique identifier for the type SilverBroccoli_unfreezeWallet_Params.
const SilverBroccoli_unfreezeWallet_Params_TypeID = 0xcb8a72bdc0f28128

func NewSilverBroccoli_unfreezeWallet_Params(s *capnp.Segment) (SilverBroccoli_unfreezeWallet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SilverBroccoli_unfreezeWallet_Params(st), err
}

func NewRootSilverBroccoli_unfreezeWallet_Params(s *capnp.Segment) (SilverBroccoli_unfreezeWallet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SilverBroccoli_unfreezeWallet_Params(st), err
}

func ReadRootSilverBroccoli_unfreezeWallet_Params(msg *capnp.Message) (SilverBroccoli_unfreezeWallet_Params, error) {
	root, err := msg.Root()
	return SilverBroccoli_unfreezeWallet_Params(root.Struct()), err
}

func (s SilverBroccoli_unfreezeWallet_Params) String() string {
	str, _ := text.Marshal(0xcb8a72bdc0f28128, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_unfreezeWallet_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_unfreezeWallet_Params) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_unfreezeWallet_Params {
	return SilverBroccoli_unfreezeWallet_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_unfreezeWallet_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_unfreezeWallet_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_unfreezeWallet_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_unfreezeWallet_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SilverBroccoli_unfreezeWallet_Params) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SilverBroccoli_unfreezeWallet_Params) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SilverBroccoli_unfreezeWallet_Params) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s SilverBroccoli_unfreezeWallet_Params) WalletId() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s SilverBroccoli_unfreezeWallet_Params) SetWalletId(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// SilverBroccoli_unfreezeWallet_Params_List is a list of SilverBroccoli_unfreezeWallet_Params.
type SilverBroccoli_unfreezeWallet_Params_List = capnp.StructList[SilverBroccoli_unfreezeWallet_Params]

// NewSilverBroccoli_unfreezeWallet_Params creates a new list of SilverBroccoli_unfreezeWallet_Params.
func NewSilverBroccoli_unfreezeWallet_Params_List(s *capnp.Segment, sz int32) (SilverBroccoli_unfreezeWallet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SilverBroccoli_unfreezeWallet_Params](l), err
}

// SilverBroccoli_unfreezeWallet_Params_Future is a wrapper for a SilverBroccoli_unfreezeWallet_Params promised by a client call.
type SilverBroccoli_unfreezeWallet_Params_Future struct{ *capnp.Future }

func (f SilverBroccoli_unfreezeWallet_Params_Future) Struct() (SilverBroccoli_unfreezeWallet_Params, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_unfreezeWallet_Params(p.Struct()), err
}

type SilverBroccoli_unfreezeWallet_Results capnp.Struct

// SilverBroccoli_unfreezeWallet_Results_TypeID is the unique identifier for the type SilverBroccoli_unfreezeWallet_Results.
const SilverBroccoli_unfreezeWallet_Results_TypeID = 0xc7e7c1aea1b6fe25

func NewSilverBroccoli_unfreezeWallet_Results(s *capnp.Segment) (SilverBroccoli_unfreezeWallet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SilverBroccoli_unfreezeWallet_Results(st), err
}

func NewRootSilverBroccoli_unfreezeWallet_Results(s *capnp.Segment) (SilverBroccoli_unfreezeWallet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SilverBroccoli_unfreezeWallet_Results(st), err
}

func ReadRootSilverBroccoli_unfreezeWallet_Results(msg *capnp.Message) (SilverBroccoli_unfreezeWallet_Results, error) {
	root, err := msg.Root()
	return SilverBroccoli_unfreezeWallet_Results(root.Struct()), err
}

func (s SilverBroccoli_unfreezeWallet_Results) String() string {
	str, _ := text.Marshal(0xc7e7c1aea1b6fe25, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_unfreezeWallet_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_unfreezeWallet_Results) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_unfreezeWallet_Results {
	return SilverBroccoli_unfreezeWallet_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_unfreezeWallet_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_unfreezeWallet_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_unfreezeWallet_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_unfreezeWallet_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SilverBroccoli_unfreezeWallet_Results_List is a list of SilverBroccoli_unfreezeWallet_Results.
type SilverBroccoli_unfreezeWallet_Results_List = capnp.StructList[SilverBroccoli_unfreezeWallet_Results]

// NewSilverBroccoli_unfreezeWallet_Results creates a new list of SilverBroccoli_unfreezeWallet_Results.
func NewSilverBroccoli_unfreezeWallet_Results_List(s *capnp.Segment, sz int32) (SilverBroccoli_unfreezeWallet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SilverBroccoli_unfreezeWallet_Results](l), err
}

// SilverBroccoli_unfreezeWallet_Results_Future is a wrapper for a SilverBroccoli_unfreezeWallet_Results promised by a client call.
type SilverBroccoli_unfreezeWallet_Results_Future struct{ *capnp.Future }

func (f SilverBroccoli_unfreezeWallet_Results_Future) Struct() (SilverBroccoli_unfreezeWallet_Results, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_unfreezeWallet_Results(p.Struct()), err
}

type SilverBroccoli_add_Params capnp.Struct

// SilverBroccoli_add_Params_TypeID is the unique identifier for the type SilverBroccoli_add_Params.
const SilverBroccoli_add_Params_TypeID = 0x92f41804cc050a57

func NewSilverBroccoli_add_Params(s *capnp.Segment) (SilverBroccoli_add_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return SilverBroccoli_add_Params(st), err
}

func NewRootSilverBroccoli_add_Params(s *capnp.Segment) (SilverBroccoli_add_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return SilverBroccoli_add_Params(st), err
}

func ReadRootSilverBroccoli_add_Params(msg *capnp.Message) (SilverBroccoli_add_Params, error) {
	root, err := msg.Root()
	return SilverBroccoli_add_Params(root.Struct()), err
}

func (s SilverBroccoli_add_Params) String() string {
	str, _ := text.Marshal(0x92f41804cc050a57, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_add_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_add_Params) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_add_Params {
	return SilverBroccoli_add_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_add_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_add_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_add_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_add_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SilverBroccoli_add_Params) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SilverBroccoli_add_Params) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SilverBroccoli_add_Params) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s SilverBroccoli_add_Params) WalletId() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s SilverBroccoli_add_Params) SetWalletId(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s SilverBroccoli_add_Params) Amount() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s SilverBroccoli_add_Params) SetAmount(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// SilverBroccoli_add_Params_List is a list of SilverBroccoli_add_Params.
type SilverBroccoli_add_Params_List = capnp.StructList[SilverBroccoli_add_Params]

// NewSilverBroccoli_add_Params creates a new list of SilverBroccoli_add_Params.
func NewSilverBroccoli_add_Params_List(s *capnp.Segment, sz int32) (SilverBroccoli_add_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[SilverBroccoli_add_Params](l), err
}

// SilverBroccoli_add_Params_Future is a wrapper for a SilverBroccoli_add_Params promised by a client call.
type SilverBroccoli_add_Params_Future struct{ *capnp.Future }

func (f SilverBroccoli_add_Params_Future) Struct() (SilverBroccoli_add_Params, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_add_Params(p.Struct()), err
}

type SilverBroccoli_add_Results capnp.Struct

// SilverBroccoli_add_Results_TypeID is the unique identifier for the type SilverBroccoli_add_Results.
const SilverBroccoli_add_Results_TypeID = 0xfc2a8837cc4de456

func NewSilverBroccoli_add_Results(s *capnp.Segment) (SilverBroccoli_add_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_add_Results(st), err
}

func NewRootSilverBroccoli_add_Results(s *capnp.Segment) (SilverBroccoli_add_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_add_Results(st), err
}

func ReadRootSilverBroccoli_add_Results(msg *capnp.Message) (SilverBroccoli_add_Results, error) {
	root, err := msg.Root()
	return SilverBroccoli_add_Results(root.Struct()), err
}

func (s SilverBroccoli_add_Results) String() string {
	str, _ := text.Marshal(0xfc2a8837cc4de456, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_add_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_add_Results) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_add_Results {
	return SilverBroccoli_add_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_add_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_add_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_add_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_add_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SilverBroccoli_add_Results) Response() (AddResponse, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AddResponse(p.Struct()), err
}

func (s SilverBroccoli_add_Results) HasResponse() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SilverBroccoli_add_Results) SetResponse(v AddResponse) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResponse sets the response field to a newly
// allocated AddResponse struct, preferring placement in s's segment.
func (s SilverBroccoli_add_Results) NewResponse() (AddResponse, error) {
	ss, err := NewAddResponse(capnp.Struct(s).Segment())
	if err != nil {
		return AddResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SilverBroccoli_add_Results_List is a list of SilverBroccoli_add_Results.
type SilverBroccoli_add_Results_List = capnp.StructList[SilverBroccoli_add_Results]

// NewSilverBroccoli_add_Results creates a new list of SilverBroccoli_add_Results.
func NewSilverBroccoli_add_Results_List(s *capnp.Segment, sz int32) (SilverBroccoli_add_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SilverBroccoli_add_Results](l), err
}

// SilverBroccoli_add_Results_Future is a wrapper for a SilverBroccoli_add_Results promised by a client call.
type SilverBroccoli_add_Results_Future struct{ *capnp.Future }

func (f SilverBroccoli_add_Results_Future) Struct() (SilverBroccoli_add_Results, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_add_Results(p.Struct()), err
}
func (p SilverBroccoli_add_Results_Future) Response() AddResponse_Future {
	return AddResponse_Future{Future: p.Future.Field(0, nil)}
}

type SilverBroccoli_reduce_Params capnp.Struct

// SilverBroccoli_reduce_Params_TypeID is the unique identifier for the type SilverBroccoli_reduce_Params.
const SilverBroccoli_reduce_Params_TypeID = 0x9b40aa7efa11024b

func NewSilverBroccoli_reduce_Params(s *capnp.Segment) (SilverBroccoli_reduce_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return SilverBroccoli_reduce_Params(st), err
}

func NewRootSilverBroccoli_reduce_Params(s *capnp.Segment) (SilverBroccoli_reduce_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return SilverBroccoli_reduce_Params(st), err
}

func ReadRootSilverBroccoli_reduce_Params(msg *capnp.Message) (SilverBroccoli_reduce_Params, error) {
	root, err := msg.Root()
	return SilverBroccoli_reduce_Params(root.Struct()), err
}

func (s SilverBroccoli_reduce_Params) String() string {
	str, _ := text.Marshal(0x9b40aa7efa11024b, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_reduce_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_reduce_Params) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_reduce_Params {
	return SilverBroccoli_reduce_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_reduce_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_reduce_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_reduce_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_reduce_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SilverBroccoli_reduce_Params) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SilverBroccoli_reduce_Params) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SilverBroccoli_reduce_Params) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s SilverBroccoli_reduce_Params) WalletId() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s SilverBroccoli_reduce_Params) SetWalletId(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s SilverBroccoli_reduce_Params) Amount() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s SilverBroccoli_reduce_Params) SetAmount(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// SilverBroccoli_reduce_Params_List is a list of SilverBroccoli_reduce_Params.
type SilverBroccoli_reduce_Params_List = capnp.StructList[SilverBroccoli_reduce_Params]

// NewSilverBroccoli_reduce_Params creates a new list of SilverBroccoli_reduce_Params.
func NewSilverBroccoli_reduce_Params_List(s *capnp.Segment, sz int32) (SilverBroccoli_reduce_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[SilverBroccoli_reduce_Params](l), err
}

// SilverBroccoli_reduce_Params_Future is a wrapper for a SilverBroccoli_reduce_Params promised by a client call.
type SilverBroccoli_reduce_Params_Future struct{ *capnp.Future }

func (f SilverBroccoli_reduce_Params_Future) Struct() (SilverBroccoli_reduce_Params, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_reduce_Params(p.Struct()), err
}

type SilverBroccoli_reduce_Results capnp.Struct

// SilverBroccoli_reduce_Results_TypeID is the unique identifier for the type SilverBroccoli_reduce_Results.
const SilverBroccoli_reduce_Results_TypeID = 0xc390c5e1b826a235

func NewSilverBroccoli_reduce_Results(s *capnp.Segment) (SilverBroccoli_reduce_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_reduce_Results(st), err
}

func NewRootSilverBroccoli_reduce_Results(s *capnp.Segment) (SilverBroccoli_reduce_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_reduce_Results(st), err
}

func ReadRootSilverBroccoli_reduce_Results(msg *capnp.Message) (SilverBroccoli_reduce_Results, error) {
	root, err := msg.Root()
	return SilverBroccoli_reduce_Results(root.Struct()), err
}

func (s SilverBroccoli_reduce_Results) String() string {
	str, _ := text.Marshal(0xc390c5e1b826a235, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_reduce_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_reduce_Results) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_reduce_Results {
	return SilverBroccoli_reduce_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_reduce_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_reduce_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_reduce_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_reduce_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SilverBroccoli_reduce_Results) Response() (ReduceResponse, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ReduceResponse(p.Struct()), err
}

func (s SilverBroccoli_reduce_Results) HasResponse() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SilverBroccoli_reduce_Results) SetResponse(v ReduceResponse) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResponse sets the response field to a newly
// allocated ReduceResponse struct, preferring placement in s's segment.
func (s SilverBroccoli_reduce_Results) NewResponse() (ReduceResponse, error) {
	ss, err := NewReduceResponse(capnp.Struct(s).Segment())
	if err != nil {
		return ReduceResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SilverBroccoli_reduce_Results_List is a list of SilverBroccoli_reduce_Results.
type SilverBroccoli_reduce_Results_List = capnp.StructList[SilverBroccoli_reduce_Results]

// NewSilverBroccoli_reduce_Results creates a new list of SilverBroccoli_reduce_Results.
func NewSilverBroccoli_reduce_Results_List(s *capnp.Segment, sz int32) (SilverBroccoli_reduce_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SilverBroccoli_reduce_Results](l), err
}

// SilverBroccoli_reduce_Results_Future is a wrapper for a SilverBroccoli_reduce_Results promised by a client call.
type SilverBroccoli_reduce_Results_Future struct{ *capnp.Future }

func (f SilverBroccoli_reduce_Results_Future) Struct() (SilverBroccoli_reduce_Results, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_reduce_Results(p.Struct()), err
}
func (p SilverBroccoli_reduce_Results_Future) Response() ReduceResponse_Future {
	return ReduceResponse_Future{Future: p.Future.Field(0, nil)}
}

type SilverBroccoli_transfer_Params capnp.Struct

// SilverBroccoli_transfer_Params_TypeID is the unique identifier for the type SilverBroccoli_transfer_Params.
const SilverBroccoli_transfer_Params_TypeID = 0xa4699594318057be

func NewSilverBroccoli_transfer_Params(s *capnp.Segment) (SilverBroccoli_transfer_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return SilverBroccoli_transfer_Params(st), err
}

func NewRootSilverBroccoli_transfer_Params(s *capnp.Segment) (SilverBroccoli_transfer_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return SilverBroccoli_transfer_Params(st), err
}

func ReadRootSilverBroccoli_transfer_Params(msg *capnp.Message) (SilverBroccoli_transfer_Params, error) {
	root, err := msg.Root()
	return SilverBroccoli_transfer_Params(root.Struct()), err
}

func (s SilverBroccoli_transfer_Params) String() string {
	str, _ := text.Marshal(0xa4699594318057be, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_transfer_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_transfer_Params) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_transfer_Params {
	return SilverBroccoli_transfer_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_transfer_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_transfer_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_transfer_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_transfer_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SilverBroccoli_transfer_Params) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SilverBroccoli_transfer_Params) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SilverBroccoli_transfer_Params) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s SilverBroccoli_transfer_Params) DstWalletId() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s SilverBroccoli_transfer_Params) SetDstWalletId(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s SilverBroccoli_transfer_Params) SrcWalletId() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s SilverBroccoli_transfer_Params) SetSrcWalletId(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s SilverBroccoli_transfer_Params) Amount() int64 {
	return int64(capnp.Struct(s).Uint64(16))
}

func (s SilverBroccoli_transfer_Params) SetAmount(v int64) {
	capnp.Struct(s).SetUint64(16, uint64(v))
}

// SilverBroccoli_transfer_Params_List is a list of SilverBroccoli_transfer_Params.
type SilverBroccoli_transfer_Params_List = capnp.StructList[SilverBroccoli_transfer_Params]

// NewSilverBroccoli_transfer_Params creates a new list of SilverBroccoli_transfer_Params.
func NewSilverBroccoli_transfer_Params_List(s *capnp.Segment, sz int32) (SilverBroccoli_transfer_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[SilverBroccoli_transfer_Params](l), err
}

// SilverBroccoli_transfer_Params_Future is a wrapper for a SilverBroccoli_transfer_Params promised by a client call.
type SilverBroccoli_transfer_Params_Future struct{ *capnp.Future }

func (f SilverBroccoli_transfer_Params_Future) Struct() (SilverBroccoli_transfer_Params, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_transfer_Params(p.Struct()), err
}

type SilverBroccoli_transfer_Results capnp.Struct

// SilverBroccoli_transfer_Results_TypeID is the unique identifier for the type SilverBroccoli_transfer_Results.
const SilverBroccoli_transfer_Results_TypeID = 0xcf7a1903a2b05163

func NewSilverBroccoli_transfer_Results(s *capnp.Segment) (SilverBroccoli_transfer_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_transfer_Results(st), err
}

func NewRootSilverBroccoli_transfer_Results(s *capnp.Segment) (SilverBroccoli_transfer_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_transfer_Results(st), err
}

func ReadRootSilverBroccoli_transfer_Results(msg *capnp.Message) (SilverBroccoli_transfer_Results, error) {
	root, err := msg.Root()
	return SilverBroccoli_transfer_Results(root.Struct()), err
}

func (s SilverBroccoli_transfer_Results) String() string {
	str, _ := text.Marshal(0xcf7a1903a2b05163, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_transfer_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_transfer_Results) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_transfer_Results {
	return SilverBroccoli_transfer_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_transfer_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_transfer_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_transfer_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_transfer_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SilverBroccoli_transfer_Results) Response() (TransferResponse, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TransferResponse(p.Struct()), err
}

func (s SilverBroccoli_transfer_Results) HasResponse() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SilverBroccoli_transfer_Results) SetResponse(v TransferResponse) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResponse sets the response field to a newly
// allocated TransferResponse struct, preferring placement in s's segment.
func (s SilverBroccoli_transfer_Results) NewResponse() (TransferResponse, error) {
	ss, err := NewTransferResponse(capnp.Struct(s).Segment())
	if err != nil {
		return TransferResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SilverBroccoli_transfer_Results_List is a list of SilverBroccoli_transfer_Results.
type SilverBroccoli_transfer_Results_List = capnp.StructList[SilverBroccoli_transfer_Results]

// NewSilverBroccoli_transfer_Results creates a new list of SilverBroccoli_transfer_Results.
func NewSilverBroccoli_transfer_Results_List(s *capnp.Segment, sz int32) (SilverBroccoli_transfer_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SilverBroccoli_transfer_Results](l), err
}

// SilverBroccoli_transfer_Results_Future is a wrapper for a SilverBroccoli_transfer_Results promised by a client call.
type SilverBroccoli_transfer_Results_Future struct{ *capnp.Future }

func (f SilverBroccoli_transfer_Results_Future) Struct() (SilverBroccoli_transfer_Results, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_transfer_Results(p.Struct()), err
}
func (p SilverBroccoli_transfer_Results_Future) Response() TransferResponse_Future {
	return TransferResponse_Future{Future: p.Future.Field(0, nil)}
}

type SilverBroccoli_reserve_Params capnp.Struct

// SilverBroccoli_reserve_Params_TypeID is the unique identifier for the type SilverBroccoli_reserve_Params.
const SilverBroccoli_reserve_Params_TypeID = 0xf1ba60a854aa0382

func NewSilverBroccoli_reserve_Params(s *capnp.Segment) (SilverBroccoli_reserve_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return SilverBroccoli_reserve_Params(st), err
}

func NewRootSilverBroccoli_reserve_Params(s *capnp.Segment) (SilverBroccoli_reserve_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return SilverBroccoli_reserve_Params(st), err
}

func ReadRootSilverBroccoli_reserve_Params(msg *capnp.Message) (SilverBroccoli_reserve_Params, error) {
	root, err := msg.Root()
	return SilverBroccoli_reserve_Params(root.Struct()), err
}

func (s SilverBroccoli_reserve_Params) String() string {
	str, _ := text.Marshal(0xf1ba60a854aa0382, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_reserve_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_reserve_Params) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_reserve_Params {
	return SilverBroccoli_reserve_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_reserve_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_reserve_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_reserve_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_reserve_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SilverBroccoli_reserve_Params) Token() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SilverBroccoli_reserve_Params) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SilverBroccoli_reserve_Params) SetToken(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s SilverBroccoli_reserve_Params) WalletId() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s SilverBroccoli_reserve_Params) SetWalletId(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s SilverBroccoli_reserve_Params) Amount() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s SilverBroccoli_reserve_Params) SetAmount(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// SilverBroccoli_reserve_Params_List is a list of SilverBroccoli_reserve_Params.
type SilverBroccoli_reserve_Params_List = capnp.StructList[SilverBroccoli_reserve_Params]

// NewSilverBroccoli_reserve_Params creates a new list of SilverBroccoli_reserve_Params.
func NewSilverBroccoli_reserve_Params_List(s *capnp.Segment, sz int32) (SilverBroccoli_reserve_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[SilverBroccoli_reserve_Params](l), err
}

// SilverBroccoli_reserve_Params_Future is a wrapper for a SilverBroccoli_reserve_Params promised by a client call.
type SilverBroccoli_reserve_Params_Future struct{ *capnp.Future }

func (f SilverBroccoli_reserve_Params_Future) Struct() (SilverBroccoli_reserve_Params, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_reserve_Params(p.Struct()), err
}

type SilverBroccoli_reserve_Results capnp.Struct

// SilverBroccoli_reserve_Results_TypeID is the unique identifier for the type SilverBroccoli_reserve_Results.
const SilverBroccoli_reserve_Results_TypeID = 0xcfe1f350055bd7bc

func NewSilverBroccoli_reserve_Results(s *capnp.Segment) (SilverBroccoli_reserve_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_reserve_Results(st), err
}

func NewRootSilverBroccoli_reserve_Results(s *capnp.Segment) (SilverBroccoli_reserve_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SilverBroccoli_reserve_Results(st), err
}

func ReadRootSilverBroccoli_reserve_Results(msg *capnp.Message) (SilverBroccoli_reserve_Results, error) {
	root, err := msg.Root()
	return SilverBroccoli_reserve_Results(root.Struct()), err
}

func (s SilverBroccoli_reserve_Results) String() string {
	str, _ := text.Marshal(0xcfe1f350055bd7bc, capnp.Struct(s))
	return str
}

func (s SilverBroccoli_reserve_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SilverBroccoli_reserve_Results) DecodeFromPtr(p capnp.Ptr) SilverBroccoli_reserve_Results {
	return SilverBroccoli_reserve_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SilverBroccoli_reserve_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SilverBroccoli_reserve_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SilverBroccoli_reserve_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SilverBroccoli_reserve_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SilverBroccoli_reserve_Results) Response() (ReserveResponse, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ReserveResponse(p.Struct()), err
}

func (s SilverBroccoli_reserve_Results) HasResponse() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SilverBroccoli_reserve_Results) SetResponse(v ReserveResponse) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResponse sets the response field to a newly
// allocated ReserveResponse struct, preferring placement in s's segment.
func (s SilverBroccoli_reserve_Results) NewResponse() (ReserveResponse, error) {
	ss, err := NewReserveResponse(capnp.Struct(s).Segment())
	if err != nil {
		return ReserveResponse{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SilverBroccoli_reserve_Results_List is a list of SilverBroccoli_reserve_Results.
type SilverBroccoli_reserve_Results_List = capnp.StructList[SilverBroccoli_reserve_Results]

// NewSilverBroccoli_reserve_Results creates a new list of SilverBroccoli_reserve_Results.
func NewSilverBroccoli_reserve_Results_List(s *capnp.Segment, sz int32) (SilverBroccoli_reserve_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SilverBroccoli_reserve_Results](l), err
}

// SilverBroccoli_reserve_Results_Future is a wrapper for a SilverBroccoli_reserve_Results promised by a client call.
type SilverBroccoli_reserve_Results_Future struct{ *capnp.Future }

func (f SilverBroccoli_reserve_Results_Future) Struct() (SilverBroccoli_reserve_Results, error) {
	p, err := f.Future.Ptr()
	return SilverBroccoli_reserve_Results(p.Struct()), err
}
func (p SilverBroccoli_reserve_Results_Future) Response() ReserveResponse_Future {
	return ReserveResponse_Future{Future: p.Future.Field(0, nil)}
}

const schema_d0de1bc908cbe6e6 = "x\xda\xc4W}l\x14u\x1a~\xdf\x99\xdd\x9d\x9d\xee" +
	"n\xdb\xc9\xb4\x81\x1ew\xd7\x83k\xef\xa0\x1c\x1f\x85#" +
	"w\xd74\xd9\xa59\xael\xa1\x97\xce\x0a\x16\x0bD\x87" +
	"\x9d\xa9\xb6v?\x9c\xdd\x82\xadb\x81D\x03D\x8c\x92" +
	"\x92\x08\xc4\xc4\x92\x92\x08\x06\xb0D\x08\xa0\xa5\xd4B\x94" +
	"\xf2\xa1\x18\x09\x1f\x86&\x8d@-\x89\x11\xd4b@\xeb" +
	"\x98\xdflgv\xb7;\xb4\x85\xa0\xfc\xb7\xd9y\xf2\xbc" +
	"\xcf\xfb\xf1\xcc\xfb\xce\xccL\xab\xc7R\xe8\xeap\x02%" +
	"4[m\xea\xd1\xf2\x9d7s\xc3\x87\xd6\x83\x90\x83\x08" +
	"`E\x06`\xf6<[\x15\x02\xf2\x82m\x15\xa0Z\xfb" +
	"\xe7?\x04\xf7]>\xbf\x11\xb84T\xaf_?e?" +
	"9\xa1\xe73\xb00\x00|\x9b\xed.\xdfnc\x80V" +
	"\x03e\x0d\xfdS\x7f*}\xcd\x04\xb4\xd5v\x99\xdf\xa9" +
	"\x81*\xd3\xac\xa7-\xe3\x7f\xd8LbQz\xac\xb5\xb6" +
	"I$\xd6\x06\xdb>@\xf5\xd0\xe0\xb9W\x17~]\xbc" +
	"\xdd\x84&\x9f\xe9\xe6\x0b\x19B\xb3\x80\xe2\xee\xbe\xb4\xdb" +
	"\xb3=\x89\xc6\xc5\x14\x11\x9al\x86\xd0|!]-\x18" +
	"p^4\xa1\x99\xdd\xc6\xa4!\xdf\xa9\xf1l]\xcd\x1d" +
	",~{}K2J\xa3\xe3\xdfb\xf6\xf3;\x19\xf2" +
	"\xab\x85q\x03\xaaG+\xd7\x146o\xa9i%1i" +
	"=f'SFb\x9ea\xfa\x00\xd5\xf4?N\xba\xbd" +
	"\xad\xf6\x8dV3\xb6]\xf6n\xfe\x80]\xab\x98\x9d\xb0" +
	"u;oT]\x9b\xb0\xef]3\xec9\xfbe\xfe\x8a" +
	"\x86\xbd\xa4a\x97\x9d\x9aq\xd3;\xe3\xc9\xbd&%\xb9" +
	"c\xdf\xcf#KR\xc9.\xa9^zr\xf0\xd6\x07\xc0" +
	"\xe5\x18M\xbcb\xd7\x9a\xd8\xaf\xb1\xfc\xb5yAu\xf6" +
	"\xc5\x8ev\x13\x16\x96\xbd\xc1gk,?v\xf7\xf5\x89" +
	"~\xc7Q3Y\xb7\xec7\xf8A{,\xaa\x1b\xf0\xdb" +
	"\xafzZ\xff>\xab\xbfC\x8b\xa7\x156\x87UH\xb8" +
	"|\x96\x84\x1b(\xed:\xd6U5\xee#3&/\xbb" +
	"\x9b\x17X\xf2\xab\\\xc3\xb6\x1e\xbb\xb9\xaa\xf1Mw\x97" +
	"\x89\xb4\x00\xfb9\xdf\xa0I\x9b\xb3\xe3o\x87zO\xbc" +
	"\xde\x95\x98\xe0b\xb6\x84D\\\xae\xb1\xbc?\xf8\xca\xf2" +
	"\x9a\x89\x9e\xe3Cs\xacIZ\xcb\xae \x80M\x1a@" +
	"*\xde\xd6\x92w\xa7\xf78pit<\x0c \xbf\x87" +
	"\xed\xe6\x0f\x13=\xb3\x0f\xb0\xa5\x14?\xc7\xc1\x00\xa8\xf9" +
	"\xbf\x1cl\xd9\xdb\xd9\xf71\xc4\x13\xfc\x93c\x1da\x9b" +
	"\xe2 l\x93\xd7~w\xac]\xd9x*\xc96\xe5\x8e" +
	"F\x82x\xc2Als\xee\x9b\xff\xff\xe5H`\xea\xd9" +
	"$\xc4aG-A\x9c\xd0\x10~\xe1\xbd\x1dtN\xe3" +
	"\xa7\x899\xe5;}\x04P\xe8$A>\xbc\xb0\xd4Z" +
	"\xf1}o\x12`\xb1S\x9b9Q\x03L\xfc\xb2\xad\xfd" +
	"le\xee\x05\xb32\xbf\xec<\xc2or\x92_\x1b\x08" +
	"\xb6\xe3\xbf\xa7\x8b\xd7\\}\xae'\x81j\x97S+\xcf" +
	"\x01\x8d\xea\xf8\xca\x17\xda&\xb66\xf7\x98Q]rn" +
	"\xe6{5\xaa+\x1a\xd6\xee\xc8lZ\xf2\xc9\xb6kI" +
	"\xa9\x0d:\xb5\xd4X\x17Im\x1d\xbd{\xd1;O\x1d" +
	"\xb9\x95dQ\xd9\xa5\xf5+\xe0\"\x16\xbd\xcd.\xd9:" +
	"\xae\xa9q \xb1_l\xba6B\xd9\xe9$\xc8\xe3W" +
	"\xcbO\xffk}\xc1\xcf\x89\xc9\xff'\xbd\x80\x00\xe6\xa6" +
	"\xbba\x9a\xaa\x84\xfd\xd3\xfdb8h\x09\x17=VS" +
	"\xb7RVJ\x94\x90\xdf\x1f\xaa\xab\x99\xfe\xb4\x1c-\x11" +
	"\xeb\xc4\xa0_\xce\xab\x10\x15\x91\x0eD\x04;m\x01\xb0" +
	" \x007e\x16\x80\x90G\xa30\x93B\xc4,\x12\x9c" +
	"\x9bV\x06 \xfc\x83F\xe1\xdf\x14\xe6FC\xcf\xcaA" +
	"t\x01\x85.@u\x95XW'G\xbd\x12\x00\xa0\x15" +
	"(\xb4\x02\x1a\x91\xa9p\xd1\xff\x14Yn\x94+5\x90" +
	"OvG\xc2\xa1`D\xae\xc0$\xcc\"E\x0cF\xaa" +
	"e\xc5'\x93\xc7t\xf2s:E\xbd(ID6#" +
	"\x06\"\x82\xd3\x90=\x8f\xc8\xf6\xd0(,\x8c\xcb\xf6\x12" +
	"\xd9\xf3i\x14\x16Q\xc8Q\x98EJ\xcd\x09E\x00\xc2" +
	"B\x1a\x85%c\xc9\xc5-\x06B\xf5\xc1\xa8Yj>" +
	"Y\xaa\xf7\xcb1\xd1\x11\x19`d\xd5\x8a\x86\xces\x93" +
	"\x82?J\xe1t\xb8hq\xb0:\xa9+f\x09 \xc9" +
	"/\"++seo\xb0:T\x81(X\x0c\xc9." +
	"\"\xd9N\xa3\x90\x95\xa2\xe4\xdeC\x17\x1d\xear^\xac" +
	"\x02\x00B\xa6A(\x12\xc2e4\x0a\xcf\xc4k \xaf" +
	"\x00\x10$\x1a\x85pB\x0d\x02\xe4\xcf:\x1a\x85\xe7)" +
	"\xe4h*\x8b\xec\x1a\xae\x9e\x14&L\xa3\xf0b\x8a\x1c" +
	")\x12\xd5\xb2\x04&\xea\x95\x8cZD\x14\x7f\xea\xbf#" +
	"t\xbaT\x8e\xce\xaf\x89DCJ\x03\xa9\x85V\xa8\xfb" +
	"\xab\xc60#x\x83\xf4\x03\x94\x14\xc3Es%\xc9'" +
	"GrSLdj\xf1!\xc9\x86\xc5\x13\x82\x15\xc4\x83" +
	"e\xd4\x04\xabC\x98\x19_\xcf\x80\x98y\xaf\xf4\xc9\xac" +
	"d\x9888y\xa22\x1e\xd2\xc4$r\xe6\xf9\xe4\xdc" +
	"H}]4)\x0d\xe2\x12'\x8d\xc2x\x0aU\xc5\x18" +
	"c&y\x88\x89\xed\x1eL\x11\xa5{@79\x8eR" +
	"\xf4!\x8f\xfbdM)\x8c.\x1503~\xd2\x0d+" +
	"\xfc\x88\xafm\x12\x82\x19V\x8d\x92xBM+b8" +
	"\xb3aN&\x8d\x0ds\x1em\x050N]\xd4o\x05" +
	"\x9e\xc3*\xa0x\x16\x19D\xe3\x84\xc2\xd8\xa2\x84\x1en" +
	"\xb0\x0a(n\x80A\xcaXx\xa8o-\xae\xbf\x16(" +
	"\xae\x97A\xda\xd8\xf3H.\" '\xd1y\xf2\xec\x0c" +
	"\x83\x16\xe3J@\xfd\x9c\xe0:\x1b\x81\xe2\x0e3h5" +
	"\x8ea\xd4\x17\x1d\xb7g\x12P\\\x0b\x836\xe3\xc2E" +
	"\xfd\xec\xe1\xb6\x14\x01\xc5m`\x901.Q\xd4\xcf\x07" +
	"nu\x19P\\=\x83vc\xed\xa2~9p5%" +
	"@q\xcb\x19U\xaf-\xd0~\xd9\x83\xaan\x1f\xa0\x95" +
	"\x06\x0f\xaa~E\x16\xa3r\xa5\x08\x19d\x16=\xa8\xea" +
	"\xa3i\xfcQ?\xe4\x00p\xc7\xe6\xd5\x83\x8c(I\x1e" +
	"t\xc7f\xc2\x83\xaa\xfe\xfe\x03\x00\x0f6)\xb1\xc1\xf2" +
	"`\xe2DYSZ^\x1f\x1cf\x82\xb1N\x163\xc2" +
	"\x1c\x0d#\xd5W\xd2or\x02\x8c\xe2\xea\x0a1\xe3\xf7" +
	"\x8cm\xec\xa0X!126\x8b\x1a\x1fo\xa3Zt" +
	"\xa8\xadF\xa3\xc6\xf8\x0e0N\xfca\x01P?\x8e\xdc" +
	"\xb2\xf2\x90^\xaa\x09\x8b\xc1\xec%\x92\xaaQ\x8e\xc44" +
	"\x1a_H\xa9\x1a\xe7J\x927X\x8d\x0fC\x9e\xee\xb4" +
	"\xfb\x99\x0e\xb2\xfe'\xd3(\xfcsx\x1cw\xb4!," +
	"{%\xb4\x00\x85\x961\xf5m\xe86yt\xe7\xd9(" +
	"\x15\x19m\x0b\x8ed\x07\xf3K\xda'G2\xc6\xb6W" +
	"\xc9\x10\x18\x1f\xdb\xb1!\xf85\x00\x00\xff\xff!\xcb\xae" +
	"("

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d0de1bc908cbe6e6,
		Nodes: []uint64{
			0x88b8701ff0a54dbe,
			0x8ad5daaf6e1a1e6a,
			0x8e47fb2be9794a6d,
			0x92f41804cc050a57,
			0x9b3ce84c8cd1fdb8,
			0x9b40aa7efa11024b,
			0x9bd80cf52ae464d4,
			0xa188a03cb6117d99,
			0xa4699594318057be,
			0xa4916a9af6221c0e,
			0xabaf1be55aea0cca,
			0xae5f2f49f02fcb5c,
			0xbbf1fdc95b664215,
			0xbdbfd815664b9423,
			0xbe0b6361e7e7caf7,
			0xbfe9320027a4dee3,
			0xc2175ac3c0c347f5,
			0xc33f987a77f0c0a4,
			0xc390c5e1b826a235,
			0xc44021695d86fdb4,
			0xc4e1f924a19a3c64,
			0xc7e7c1aea1b6fe25,
			0xcb8a72bdc0f28128,
			0xce2b6dba204eedd1,
			0xcf7a1903a2b05163,
			0xcfe1f350055bd7bc,
			0xd71f57cebdb1db21,
			0xde0071e4803ccc44,
			0xde94a421b17b76c4,
			0xe59ac8587f100b08,
			0xf1ba60a854aa0382,
			0xf57a7f17995809f6,
			0xfc2a8837cc4de456,
		},
		Compressed: true,
	})
}
